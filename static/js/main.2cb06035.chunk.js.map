{"version":3,"sources":["actions/types.tsx","components/todoItem/todoItem.tsx","components/addItem/addItem.tsx","components/undoButton/undoButton.tsx","containers/app/App.tsx","actions/index.ts","serviceWorker.js","reducers/recordsReducer.ts","reducers/index.ts","index.js","localStorageHandlers.js"],"names":["Records","useStyles","makeStyles","theme","createStyles","heading","padding","spacing","color","palette","text","primary","textAlign","container","todoItem__paper","display","alignItems","marginBottom","todoItem__text","width","todoItem__control","TodoItem","_ref","done","deleteRecord","updateRecord","index","classes","_useState","useState","_useState2","Object","slicedToArray","isEditing","setEditingState","_useState3","_useState4","newText","setText","handleAddButtonClick","e","charCode","updateRecordAndStopEditing","handleInputBlur","handleInputChange","target","value","react_default","a","createElement","Paper","className","Checkbox","checked","onClick","id","concat","Input","autoFocus","onKeyPress","onChange","onBlur","Create","DeleteSweep","addItem__container","justifyContent","addItem__text","addItem__button","margin","AddItem","addRecord","Fab","aria-label","Add","UndoButton","undoRecordDelete","Button","connect","state","records","dispatch","record","type","ADD","payload","DELETE","UPDATE","UNDO","Grid","justify","item","xs","md","addItem","map","i","todoItem","assign","key","undoButton","Boolean","window","location","hostname","match","initialState","stateHistory","pushNewStateToHistory","push","JSON","stringify","combineReducers","arguments","length","undefined","action","toConsumableArray","filter","previousState","parse","persistedState","serializedState","localStorage","getItem","loadState","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","subscribe","setItem","saveState","getState","ReactDOM","render","es","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cb06035.chunk.js","sourcesContent":["enum Records {\n  ADD = \"ADD\",\n  DELETE = \"DELETE\",\n  UPDATE = \"UPDATE\",\n  UNDO = \"UNDO\"\n}\n\nexport default Records;\n","import React, { useState } from 'react';\nimport { TRecord } from '../../reducers/recordsReducer';\nimport { deleteRecord, updateRecord } from '../../actions';\nimport Paper from '@material-ui/core/Paper';\nimport Input from '@material-ui/core/Input';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Create, DeleteSweep } from '@material-ui/icons';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    heading: {\n      padding: theme.spacing(2),\n      color: theme.palette.text.primary,\n      textAlign: 'center',\n    },\n    container: {\n      textAlign: 'center'\n    },\n    todoItem__paper: {\n      padding: theme.spacing(2),\n      color: theme.palette.text.primary,\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '10px',\n    },\n    todoItem__text: {\n      width: 'calc(100% - 140px)',\n    },\n    todoItem__control: {\n      padding: '10px',\n    },\n  }),\n);\n\ninterface TActionsProps {\n  deleteRecord: typeof deleteRecord,\n  updateRecord: typeof updateRecord\n};\n\ntype TProps = TRecord & TActionsProps & { index: number };\n\nconst TodoItem = ({ done, text, deleteRecord, updateRecord, index }: TProps) => {\n  const classes = useStyles();\n  const [isEditing, setEditingState] = useState(false);\n  const [newText, setText] = useState(text);\n\n  const renderTextOrInput = () =>\n    isEditing\n      ? <Input\n          className={ classes.todoItem__text }\n          autoFocus\n          value={ newText }\n          onKeyPress={ handleAddButtonClick }\n          onChange={ handleInputChange }\n          onBlur={ handleInputBlur }\n        />\n      : text;\n\n  const handleAddButtonClick = (e: React.KeyboardEvent) => {\n    if (e.charCode === 13) {\n      updateRecordAndStopEditing()\n    }\n  };\n\n  const handleInputBlur = () => updateRecordAndStopEditing()\n\n  const updateRecordAndStopEditing = () => {\n    updateRecord({ text: newText, done, index })\n    setEditingState(false)\n  }\n\n  const handleDeleteButtonClick = () => deleteRecord({ text: newText, done, index })\n\n  const handleEditingButtonClick = () => setEditingState(!isEditing)\n\n  const handleCheckboxClick = () => updateRecord({ text, done: !done, index })\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => setText(e.target.value);\n\n  return (\n    <Paper className={ classes.todoItem__paper }>\n      <Checkbox checked={ done } onClick={ handleCheckboxClick } />\n      <div className={ classes.todoItem__text } id={ `text${index}` }>\n        { renderTextOrInput() }\n      </div>\n      <div>\n        <Create\n          className={ classes.todoItem__control }\n          onClick={ handleEditingButtonClick }\n        />\n        <DeleteSweep\n          className={ classes.todoItem__control }\n          onClick={ handleDeleteButtonClick }\n        />\n      </div>\n    </Paper>\n  );\n}\n\nexport default TodoItem;\n","import React, { useState } from 'react';\nimport { addRecord } from '../../actions';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Fab } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\nimport Input from '@material-ui/core/Input';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    addItem__container: {\n      display: 'flex',\n      alignItems: 'flex-end',\n      justifyContent: 'space-between',\n      marginBottom: '10px',\n      padding: '0 20px',\n    },\n    addItem__text: {\n      width: '85%',\n    },\n    addItem__button: {\n      margin: '10px',\n    }\n  }),\n);\n\ninterface TProps {\n  addRecord: typeof addRecord\n}\n\nconst AddItem = ({ addRecord }: TProps) => {\n  const classes = useStyles();\n  const [text, setText] = useState('');\n\n  const handleAddButtonClick = () => {\n    addRecord({ text: text, done: false })\n    setText('')\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => setText(e.target.value);\n\n  return (\n    <div className={ classes.addItem__container }>\n      <Input\n        className={ classes.addItem__text }\n        value={ text }\n        onChange={ handleInputChange }\n      />\n      <Fab\n        color=\"primary\"\n        aria-label=\"Add\"\n        className={ classes.addItem__button }\n        onClick={ handleAddButtonClick }\n      >\n        <Add />\n      </Fab>\n    </div>\n  );\n}\n\nexport default AddItem;\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { undoRecordDelete } from '../../actions';\n\ninterface TProps {\n    undoRecordDelete: typeof undoRecordDelete\n}\n\nconst UndoButton = ({ undoRecordDelete }: TProps) => {\n    const handleButtonClick = () => undoRecordDelete({ text: '' })\n\n    return <Button onClick={ handleButtonClick }>Undo</Button>\n}\n\nexport default UndoButton;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addRecord, deleteRecord, updateRecord, undoRecordDelete } from '../../actions';\nimport { TRecords, TRecord } from '../../reducers/recordsReducer';\nimport { AppState } from '../../reducers';\nimport { TDispatch } from '../../commonTypes';\nimport { Grid } from '@material-ui/core';\nimport TodoItem, { useStyles } from '../../components/todoItem/todoItem';\nimport AddItem from '../../components/addItem/addItem';\nimport UndoButton from '../../components/undoButton/undoButton';\n\ninterface TProps {\n  records: TRecords,\n  addRecord: typeof addRecord,\n  deleteRecord: typeof deleteRecord,\n  updateRecord: typeof updateRecord,\n  undoRecordDelete: typeof undoRecordDelete\n}\n\nfunction App({ records, addRecord, deleteRecord, updateRecord, undoRecordDelete }: TProps) {\n  const classes = useStyles();\n\n  return (\n    <div className=\"app\">\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={10} md={8}>\n          <h1 className={ classes.heading }>My todo list for Ornament</h1>\n          <AddItem addRecord={ addRecord } />\n          <div className=\"todo-item-container\">\n            { records.map((record: TRecord, i: number) =>\n                <TodoItem\n                  key={record.text}\n                  {...record}\n                  deleteRecord={ deleteRecord }\n                  updateRecord={ updateRecord }\n                  index={ i }\n                />\n            )}\n          </div>\n          <UndoButton undoRecordDelete={ undoRecordDelete } />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    records: state.records\n  }\n};\n\nconst mapDispatchToProps = (dispatch: TDispatch) => {\n  return {\n    addRecord: (record: TRecord) => dispatch(addRecord(record)),\n    deleteRecord: (record: TRecord) => dispatch(deleteRecord(record)),\n    updateRecord: (record: TRecord) => dispatch(updateRecord(record)),\n    undoRecordDelete: (record: TRecord) => dispatch(undoRecordDelete(record))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { TRecord } from \"../reducers/recordsReducer\";\nimport Records from \"./types\";\n\nexport interface TRecordAction {\n  type: string;\n  payload: TRecord;\n}\n\nexport const addRecord = (record: TRecord): TRecordAction => ({\n  type: Records.ADD,\n  payload: record\n});\n\nexport const deleteRecord = (record: TRecord): TRecordAction => ({\n  type: Records.DELETE,\n  payload: record\n});\n\nexport const updateRecord = (record: TRecord): TRecordAction => ({\n  type: Records.UPDATE,\n  payload: record\n});\n\nexport const undoRecordDelete = (record: TRecord): TRecordAction => ({\n  type: Records.UNDO,\n  payload: record\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { TRecordAction } from '../actions';\nimport Records from '../actions/types';\n\nexport interface TRecord {\n  text?: string;\n  done?: boolean;\n  index?: number;\n}\n\nexport type TRecords = TRecord[];\n\nexport const initialState = [\n  {\n    text: \"skype call with PO\",\n    done: true\n  },\n  {\n    text: \"test task (todo)\",\n    done: true\n  },\n  {\n    text: \"call with teamlead\",\n    done: false\n  },\n  {\n    text: \"get offer\",\n    done: false\n  },\n  {\n    text: \"relocation to Montenegro\",\n    done: false\n  }\n];\n\nlet stateHistory: string[] = [];\n\nconst pushNewStateToHistory = (state: TRecords) => stateHistory.push(JSON.stringify(state));\n\nexport default function recordsReducer(\n  state: TRecords = initialState,\n  action: TRecordAction = { type: \"\", payload: {} }\n): TRecords {\n  switch (action.type) {\n    case Records.ADD:\n      pushNewStateToHistory(state);\n      return [{ text: action.payload.text, done: false }, ...state];\n    case Records.DELETE:\n      pushNewStateToHistory(state);\n      return state.filter((record, index) => index !== action.payload.index);\n    case Records.UPDATE:\n      pushNewStateToHistory(state);\n      return state.map((record, index) =>\n        index === action.payload.index ? action.payload : record\n      );\n    case Records.UNDO:\n      const previousState = JSON.parse(stateHistory[stateHistory.length - 1]);\n      if (previousState.length > state.length) {\n        return previousState\n      }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport recordsReducer, { TRecords } from './recordsReducer';\n\nexport interface AppState {\n  records: TRecords;\n}\n\nexport default combineReducers<AppState>({\n  records: recordsReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app/App.tsx';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nimport { loadState, saveState } from './localStorageHandlers';\n\nconst persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nstore.subscribe(() => {\n  saveState({\n    records: store.getState().records\n  });\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState = () => {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n        return undefined;\n    }\n    return JSON.parse(serializedState);\n};\n\nexport const saveState = (state) => {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n};\n"],"sourceRoot":""}