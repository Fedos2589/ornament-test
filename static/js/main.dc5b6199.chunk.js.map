{"version":3,"sources":["actions/types.tsx","components/todoItem/todoItem.tsx","components/addItem/addItem.tsx","containers/app/App.tsx","actions/index.ts","serviceWorker.js","reducers/recordsReducer.ts","reducers/index.ts","index.js"],"names":["Records","useStyles","makeStyles","theme","createStyles","heading","padding","spacing","color","palette","text","primary","textAlign","container","todoItem__paper","display","alignItems","marginBottom","todoItem__text","width","todoItem__control","TodoItem","_ref","done","deleteRecord","updateRecord","index","classes","_useState","useState","_useState2","Object","slicedToArray","isEditing","setEditingState","_useState3","_useState4","newText","setText","handleAddButtonClick","e","charCode","handleInputChange","target","value","react_default","a","createElement","Paper","className","Checkbox","checked","onClick","id","concat","Input","autoFocus","onKeyPress","onChange","Create","DeleteSweep","addItem__container","justifyContent","addItem__text","addItem__button","margin","AddItem","addRecord","Fab","aria-label","Add","connect","state","records","dispatch","record","type","ADD","payload","DELETE","UPDATE","Grid","justify","item","xs","md","addItem","map","i","todoItem","assign","key","Boolean","window","location","hostname","match","initialState","combineReducers","arguments","length","undefined","action","toConsumableArray","filter","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc5b6199.chunk.js","sourcesContent":["enum Records {\n  ADD = \"ADD\",\n  DELETE = \"DELETE\",\n  UPDATE = \"UPDATE\"\n}\n\nexport default Records;\n","import React, { useState } from 'react';\nimport { TRecord } from '../../reducers/recordsReducer';\nimport { deleteRecord, updateRecord } from '../../actions';\nimport Paper from '@material-ui/core/Paper';\nimport Input from '@material-ui/core/Input';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Create, DeleteSweep } from '@material-ui/icons';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    heading: {\n      padding: theme.spacing(2),\n      color: theme.palette.text.primary,\n      textAlign: 'center',\n    },\n    container: {\n      textAlign: 'center'\n    },\n    todoItem__paper: {\n      padding: theme.spacing(2),\n      color: theme.palette.text.primary,\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '10px',\n    },\n    todoItem__text: {\n      width: 'calc(100% - 140px)',\n    },\n    todoItem__control: {\n      padding: '10px',\n    },\n  }),\n);\n\ninterface TActionsProps {\n  deleteRecord: typeof deleteRecord,\n  updateRecord: typeof updateRecord\n};\n\ntype TProps = TRecord & TActionsProps & { index: number };\n\nconst TodoItem = ({ done, text, deleteRecord, updateRecord, index }: TProps) => {\n  const classes = useStyles();\n  const [isEditing, setEditingState] = useState(false);\n  const [newText, setText] = useState(text);\n\n  const renderTextOrInput = () =>\n    isEditing\n      ? <Input\n          className={ classes.todoItem__text }\n          autoFocus\n          value={ newText }\n          onKeyPress={ handleAddButtonClick }\n          onChange={ handleInputChange }\n        />\n      : text;\n\n  const handleAddButtonClick = (e: React.KeyboardEvent) => {\n    if (e.charCode === 13) {\n      updateRecord({ text: newText, done, index })\n      setEditingState(false)\n    }\n  };\n\n  const handleDeleteButtonClick = () => deleteRecord({ text: newText, done, index })\n\n  const handleEditingButtonClick = () => setEditingState(!isEditing)\n\n  const handleCheckboxClick = () => updateRecord({ text, done: !done, index })\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => setText(e.target.value);\n\n  return (\n    <Paper className={ classes.todoItem__paper }>\n      <Checkbox checked={ done } onClick={ handleCheckboxClick } />\n      <div className={ classes.todoItem__text } id={ `text${index}` }>\n        { renderTextOrInput() }\n      </div>\n      <div>\n        <Create\n          className={ classes.todoItem__control }\n          onClick={ handleEditingButtonClick }\n        />\n        <DeleteSweep\n          className={ classes.todoItem__control }\n          onClick={ handleDeleteButtonClick }\n        />\n      </div>\n    </Paper>\n  );\n}\n\nexport default TodoItem;\n","import React, { useState } from 'react';\nimport { addRecord } from '../../actions';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Fab } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\nimport Input from '@material-ui/core/Input';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    addItem__container: {\n      display: 'flex',\n      alignItems: 'flex-end',\n      justifyContent: 'space-between',\n      marginBottom: '10px',\n      padding: '0 20px',\n    },\n    addItem__text: {\n      width: '85%',\n    },\n    addItem__button: {\n      margin: '10px',\n    }\n  }),\n);\n\ninterface TProps {\n  addRecord: typeof addRecord\n}\n\nconst AddItem = ({ addRecord }: TProps) => {\n  const classes = useStyles();\n  const [text, setText] = useState('');\n\n  const handleAddButtonClick = () => {\n    addRecord({ text: text, done: false })\n    setText('')\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => setText(e.target.value);\n\n  return (\n    <div className={ classes.addItem__container }>\n      <Input\n        className={ classes.addItem__text }\n        value={ text }\n        onChange={ handleInputChange }\n      />\n      <Fab\n        color=\"primary\"\n        aria-label=\"Add\"\n        className={ classes.addItem__button }\n        onClick={ handleAddButtonClick }\n      >\n        <Add />\n      </Fab>\n    </div>\n  );\n}\n\nexport default AddItem;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addRecord, deleteRecord, updateRecord } from '../../actions';\nimport { TRecords, TRecord } from '../../reducers/recordsReducer';\nimport { AppState } from '../../reducers';\nimport { TDispatch } from '../../commonTypes';\nimport { Grid } from '@material-ui/core';\nimport TodoItem, { useStyles } from '../../components/todoItem/todoItem';\nimport AddItem from '../../components/addItem/addItem';\n\ninterface TProps {\n  records: TRecords,\n  addRecord: typeof addRecord,\n  deleteRecord: typeof deleteRecord,\n  updateRecord: typeof updateRecord\n}\n\nfunction App({ records, addRecord, deleteRecord, updateRecord }: TProps) {\n  const classes = useStyles();\n\n  return (\n    <div className=\"app\">\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={10} md={8}>\n          <h1 className={ classes.heading }>My todo list for Ornament</h1>\n          <AddItem addRecord={ addRecord } />\n          <div className=\"todo-item-container\">\n            { records.map((record: TRecord, i: number) =>\n                <TodoItem\n                  key={record.text}\n                  {...record}\n                  deleteRecord={ deleteRecord }\n                  updateRecord={ updateRecord }\n                  index={ i }\n                />\n            )}\n          </div>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    records: state.records\n  }\n};\n\nconst mapDispatchToProps = (dispatch: TDispatch) => {\n  return {\n    addRecord: (record: TRecord) => dispatch(addRecord(record)),\n    deleteRecord: (record: TRecord) => dispatch(deleteRecord(record)),\n    updateRecord: (record: TRecord) => dispatch(updateRecord(record))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { TRecord } from \"../reducers/recordsReducer\";\nimport Records from \"./types\";\n\nexport interface TRecordAction {\n  type: string;\n  payload: TRecord;\n}\n\nexport const addRecord = (record: TRecord): TRecordAction => ({\n  type: Records.ADD,\n  payload: record\n});\n\nexport const deleteRecord = (record: TRecord): TRecordAction => ({\n  type: Records.DELETE,\n  payload: record\n});\n\nexport const updateRecord = (record: TRecord): TRecordAction => ({\n  type: Records.UPDATE,\n  payload: record\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { TRecordAction } from \"../actions\";\nimport Records from \"../actions/types\";\n\nexport interface TRecord {\n  text?: string;\n  done?: boolean;\n  index?: number;\n}\n\nexport type TRecords = TRecord[];\n\nexport const initialState = [\n  {\n    text: \"skype call with PO\",\n    done: true\n  },\n  {\n    text: \"test task (todo)\",\n    done: true\n  },\n  {\n    text: \"call with teamlead\",\n    done: false\n  },\n  {\n    text: \"get offer\",\n    done: false\n  },\n  {\n    text: \"relocation to Montenegro\",\n    done: false\n  }\n];\n\nexport default function recordsReducer(\n  state: TRecords = initialState,\n  action: TRecordAction = { type: \"\", payload: {} }\n): TRecords {\n  switch (action.type) {\n    case Records.ADD:\n      return [{ text: action.payload.text, done: false }, ...state];\n    case Records.DELETE:\n      return state.filter((record, index) => index !== action.payload.index);\n    case Records.UPDATE:\n      return state.map((record, index) =>\n        index === action.payload.index ? action.payload : record\n      );\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport recordsReducer, { TRecords } from \"./recordsReducer\";\n\nexport interface AppState {\n  records: TRecords;\n}\n\nexport default combineReducers<AppState>({\n  records: recordsReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app/App.tsx';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}